"use strict";

var _inferno = require("inferno");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('inferno'),
    Component = _require.Component,
    Fragment = _require.Fragment;

var _require2 = require('../../util/cache'),
    cacheComponent = _require2.cacheComponent;

var ShareThis =
/*#__PURE__*/
function (_Component) {
  _inherits(ShareThis, _Component);

  function ShareThis() {
    _classCallCheck(this, ShareThis);

    return _possibleConstructorReturn(this, _getPrototypeOf(ShareThis).apply(this, arguments));
  }

  _createClass(ShareThis, [{
    key: "render",
    value: function render() {
      var installUrl = this.props.installUrl;

      if (!installUrl) {
        return (0, _inferno.createVNode)(1, "div", "notification is-danger", [(0, _inferno.createTextVNode)("You need to set "), (0, _inferno.createVNode)(1, "code", null, "install_url", 16), (0, _inferno.createTextVNode)(" to use ShareThis. Please set it in "), (0, _inferno.createVNode)(1, "code", null, "_config.yml", 16), (0, _inferno.createTextVNode)(".")], 4);
      }

      return (0, _inferno.createFragment)([(0, _inferno.createVNode)(1, "div", "sharethis-inline-share-buttons"), (0, _inferno.createVNode)(1, "script", null, null, 1, {
        "src": installUrl,
        "defer": true
      })], 4);
    }
  }]);

  return ShareThis;
}(Component);

module.exports = cacheComponent(ShareThis, 'share.sharethis', function (props) {
  var share = props.share;
  return {
    installUrl: share.install_url
  };
});