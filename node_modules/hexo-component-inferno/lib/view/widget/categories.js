"use strict";

var _inferno = require("inferno");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('inferno'),
    Component = _require.Component;

var _require2 = require('../../util/cache'),
    cacheComponent = _require2.cacheComponent;

var Categories =
/*#__PURE__*/
function (_Component) {
  _inherits(Categories, _Component);

  function Categories() {
    _classCallCheck(this, Categories);

    return _possibleConstructorReturn(this, _getPrototypeOf(Categories).apply(this, arguments));
  }

  _createClass(Categories, [{
    key: "renderList",
    value: function renderList(categories, showCount) {
      var _this = this;

      return categories.map(function (category) {
        return (0, _inferno.createVNode)(1, "li", null, [(0, _inferno.createVNode)(1, "a", "level is-mobile is-marginless", [(0, _inferno.createVNode)(1, "span", "level-start", (0, _inferno.createVNode)(1, "span", "level-item", category.name, 0), 2), showCount ? (0, _inferno.createVNode)(1, "span", "level-end", (0, _inferno.createVNode)(1, "span", "level-item tag", category.count, 0), 2) : null], 0, {
          "href": category.url
        }), category.children.length ? (0, _inferno.createVNode)(1, "ul", "mr-0", _this.renderList(category.children, showCount), 0) : null], 0);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          showCount = _this$props.showCount,
          categories = _this$props.categories;
      return (0, _inferno.createVNode)(1, "div", "card widget", (0, _inferno.createVNode)(1, "div", "card-content", (0, _inferno.createVNode)(1, "div", "menu", [(0, _inferno.createVNode)(1, "h3", "menu-label", title, 0), (0, _inferno.createVNode)(1, "ul", "menu-list", this.renderList(categories, showCount), 0)], 4), 2), 2);
    }
  }]);

  return Categories;
}(Component);

module.exports = cacheComponent(Categories, 'widget.categories', function (props) {
  // adapted from hexo/lib/plugins/helper/list_categories.js
  var page = props.page,
      helper = props.helper,
      _props$categories = props.categories,
      categories = _props$categories === void 0 ? props.site.categories : _props$categories,
      _props$orderBy = props.orderBy,
      orderBy = _props$orderBy === void 0 ? 'name' : _props$orderBy,
      _props$order = props.order,
      order = _props$order === void 0 ? 1 : _props$order,
      _props$show_current = props.show_current,
      show_current = _props$show_current === void 0 ? false : _props$show_current,
      _props$show_count = props.show_count,
      show_count = _props$show_count === void 0 ? true : _props$show_count;
  var url_for = helper.url_for,
      _p = helper._p;

  if (!categories || !categories.length) {
    return null;
  }

  var depth = 0;

  try {
    depth = parseInt(props.depth, 10);
  } catch (e) {}

  function prepareQuery(parent) {
    var query = {};

    if (parent) {
      query.parent = parent;
    } else {
      query.parent = {
        $exists: false
      };
    }

    return categories.find(query).sort(orderBy, order).filter(function (cat) {
      return cat.length;
    });
  }

  function hierarchicalList(level, parent) {
    return prepareQuery(parent).map(function (cat, i) {
      var children = [];

      if (!depth || level + 1 < depth) {
        children = hierarchicalList(level + 1, cat._id);
      }

      var isCurrent = false;

      if (show_current && page) {
        for (var j = 0; j < cat.length; j++) {
          var post = cat.posts.data[j];

          if (post && post._id === page._id) {
            isCurrent = true;
            break;
          }
        } // special case: category page


        isCurrent = isCurrent || page.base && page.base.startsWith(cat.path);
      }

      return {
        children: children,
        isCurrent: isCurrent,
        name: cat.name,
        count: cat.length,
        url: url_for(cat.path)
      };
    });
  }

  return {
    showCount: show_count,
    categories: hierarchicalList(0),
    title: _p('common.category', Infinity)
  };
});