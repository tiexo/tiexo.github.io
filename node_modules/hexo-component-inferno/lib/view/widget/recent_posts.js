"use strict";

var _inferno = require("inferno");

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('inferno'),
    Component = _require.Component;

var _require2 = require('../../util/cache'),
    cacheComponent = _require2.cacheComponent;

var ArticleMedia = require('../common/article-media');

var RecentPosts =
/*#__PURE__*/
function (_Component) {
  _inherits(RecentPosts, _Component);

  function RecentPosts() {
    _classCallCheck(this, RecentPosts);

    return _possibleConstructorReturn(this, _getPrototypeOf(RecentPosts).apply(this, arguments));
  }

  _createClass(RecentPosts, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          posts = _this$props.posts;
      return (0, _inferno.createVNode)(1, "div", "card widget", (0, _inferno.createVNode)(1, "div", "card-content", [(0, _inferno.createVNode)(1, "h3", "menu-label", title, 0), posts.map(function (post) {
        return (0, _inferno.createComponentVNode)(2, ArticleMedia, {
          "thumbnail": post.thumbnail,
          "url": post.url,
          "title": post.title,
          "date": post.date,
          "dateXml": post.dateXml,
          "categories": post.categories
        });
      })], 0), 2);
    }
  }]);

  return RecentPosts;
}(Component);

module.exports = cacheComponent(RecentPosts, 'widget.recentposts', function (props) {
  var site = props.site,
      helper = props.helper;
  var has_thumbnail = helper.has_thumbnail,
      get_thumbnail = helper.get_thumbnail,
      url_for = helper.url_for,
      __ = helper.__,
      date_xml = helper.date_xml,
      date = helper.date;

  if (!site.posts.length) {
    return null;
  }

  var posts = site.posts.sort('date', -1).limit(5).map(function (post) {
    return {
      url: url_for(post.link || post.path),
      title: post.title,
      date: date(post.date),
      dateXml: date_xml(post.date),
      thumbnail: has_thumbnail(post) ? get_thumbnail(post) : null,
      categories: post.categories.map(function (category) {
        return {
          name: category.name,
          url: url_for(category.path)
        };
      })
    };
  });
  return {
    posts: posts,
    title: __('widget.recents')
  };
});