"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Ajv = require('ajv');

var path = require('path');

var deepmerge = require('deepmerge');

var yaml = require('../util/yaml');

var MAGIC = 'c823d4d4';
var PRIMITIVE_DEFAULTS = {
  'null': null,
  'boolean': false,
  'number': 0,
  'integer': 0,
  'string': '',
  'array': [],
  'object': {}
};

var DefaultValue =
/*#__PURE__*/
function () {
  function DefaultValue(value, description) {
    _classCallCheck(this, DefaultValue);

    this.value = value;
    this.description = description;
  }

  _createClass(DefaultValue, [{
    key: "merge",
    value: function merge(source) {
      if ('description' in source && source.description) {
        this.description = source.description;
      }

      if ('value' in source && source.value) {
        if (this.value instanceof DefaultValue) {
          this.value.merge(source.value);
        } else if (Array.isArray(this.value) && Array.isArray(source.value)) {
          var _this$value;

          (_this$value = this.value).concat.apply(_this$value, _toConsumableArray(source.value));
        } else if (_typeof(this.value) === 'object' && _typeof(source.value) === 'object') {
          for (var key in source.value) {
            this.value[key] = source.value[key];
          }
        } else {
          this.value = deepmerge(this.value, source.value);
        }
      }

      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      var result = new DefaultValue(this.value, this.description);

      if (result.value instanceof DefaultValue) {
        result.value = result.value.clone();
      } else if (Array.isArray(result.value)) {
        var _ref;

        result.value = (_ref = []).concat.apply(_ref, _toConsumableArray(result.value));
      } else if (_typeof(result.value) === 'object') {
        result.value = Object.assign({}, result.value);
      }

      return result;
    }
  }, {
    key: "toCommentedArray",
    value: function toCommentedArray() {
      var _ref2;

      return (_ref2 = []).concat.apply(_ref2, _toConsumableArray(this.value.map(function (item) {
        if (item instanceof DefaultValue) {
          if (typeof item.description !== 'string' || !item.description.trim()) {
            return [item.toCommented()];
          }

          return item.description.split('\n').map(function (line, i) {
            return MAGIC + i + ': ' + line;
          }).concat(item.toCommented());
        }

        return [item];
      })));
    }
  }, {
    key: "toCommentedObject",
    value: function toCommentedObject() {
      var _this = this;

      if (this.value instanceof DefaultValue) {
        return this.value.toCommented();
      }

      var result = {};

      var _loop = function _loop(key) {
        var item = _this.value[key];

        if (item instanceof DefaultValue) {
          if (typeof item.description === 'string' && item.description.trim()) {
            item.description.split('\n').forEach(function (line, i) {
              result[MAGIC + key + i] = line;
            });
          }

          result[key] = item.toCommented();
        } else {
          result[key] = item;
        }
      };

      for (var key in this.value) {
        _loop(key);
      }

      return result;
    }
  }, {
    key: "toCommented",
    value: function toCommented() {
      if (Array.isArray(this.value)) {
        return this.toCommentedArray();
      } else if (_typeof(this.value) === 'object' && this.value !== null) {
        return this.toCommentedObject();
      }

      return this.value;
    }
  }, {
    key: "toYaml",
    value: function toYaml() {
      var regex = new RegExp('^(\\s*)(?:-\\s*\\\')?' + MAGIC + '.*?:\\s*\\\'?(.*?)\\\'*$', 'mg');
      return yaml.stringify(this.toCommented()).replace(regex, '$1# $2'); // restore comments
    }
  }]);

  return DefaultValue;
}();
/* eslint-disable no-use-before-define */


var Schema =
/*#__PURE__*/
function () {
  function Schema(loader, def) {
    _classCallCheck(this, Schema);

    if (!(loader instanceof SchemaLoader)) {
      throw new Error('loader must be an instance of SchemaLoader');
    }

    if (_typeof(def) !== 'object') {
      throw new Error('schema definition must be an object');
    }

    this.loader = loader;
    this.def = def;
    this.compiledSchema = null;
  }

  _createClass(Schema, [{
    key: "validate",
    value: function validate(obj) {
      if (!this.compiledSchema) {
        this.compiledSchema = this.loader.compileValidator(this.def.$id);
      }

      return this.compiledSchema(obj) ? true : this.compiledSchema.errors;
    }
  }, {
    key: "getArrayDefaultValue",
    value: function getArrayDefaultValue(def) {
      var _this2 = this;

      var value;
      var defaultValue = new DefaultValue(null, def.description);

      if ('items' in def && _typeof(def.items) === 'object') {
        var items = Object.assign({}, def.items);
        delete items.oneOf;
        value = this.getDefaultValue(items);
      }

      if ('oneOf' in def.items && Array.isArray(def.items.oneOf)) {
        defaultValue.value = def.items.oneOf.map(function (one) {
          if (!(value instanceof DefaultValue)) {
            return _this2.getDefaultValue(one);
          }

          return value.clone().merge(_this2.getDefaultValue(one));
        });
      } else {
        if (!Array.isArray(value)) {
          value = [value];
        }

        defaultValue.value = value;
      }

      return defaultValue;
    }
  }, {
    key: "getObjectDefaultValue",
    value: function getObjectDefaultValue(def) {
      var value = {};

      if ('properties' in def && _typeof(def.properties) === 'object') {
        for (var property in def.properties) {
          value[property] = this.getDefaultValue(def.properties[property]);
        }
      }

      var defaultValue = new DefaultValue(value, def.description);

      if ('oneOf' in def && Array.isArray(def.oneOf) && def.oneOf.length) {
        defaultValue.merge(this.getDefaultValue(def.oneOf[0]));
        defaultValue.description = def.description;
      }

      return defaultValue;
    }
  }, {
    key: "getTypedDefaultValue",
    value: function getTypedDefaultValue(def) {
      var defaultValue;
      var type = Array.isArray(def.type) ? def.type[0] : def.type;

      if (type === 'array') {
        defaultValue = this.getArrayDefaultValue(def);
      } else if (type === 'object') {
        defaultValue = this.getObjectDefaultValue(def);
      } else if (type in PRIMITIVE_DEFAULTS) {
        if ('nullable' in def && def.nullable) {
          defaultValue = new DefaultValue(null, def.description);
        } else {
          defaultValue = new DefaultValue(PRIMITIVE_DEFAULTS[type], def.description);
        }
      } else {
        throw new Error("Cannot get default value for type ".concat(type));
      } // referred default value always get overwritten by its parent default value


      if ('$ref' in def && def.$ref) {
        defaultValue = this.getReferredDefaultValue(def).merge(defaultValue);
      }

      return defaultValue;
    }
  }, {
    key: "getReferredDefaultValue",
    value: function getReferredDefaultValue(def) {
      var schema = this.loader.getSchema(def.$ref);

      if (!schema) {
        throw new Error("Schema ".concat(def.$ref, " is not loaded"));
      }

      return this.getDefaultValue(schema.def).merge({
        description: def.description
      });
    }
  }, {
    key: "getDefaultValue",
    value: function getDefaultValue() {
      var def = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      if (!def) {
        def = this.def;
      }

      if ('const' in def) {
        return new DefaultValue(def["const"], def.description);
      }

      if ('default' in def) {
        return new DefaultValue(def["default"], def.description);
      }

      if ('examples' in def && Array.isArray(def.examples) && def.examples.length) {
        return new DefaultValue(def.examples[0], def.description);
      }

      if ('type' in def && def.type) {
        return this.getTypedDefaultValue(def);
      } // $ref only schemas


      if ('$ref' in def && def.$ref) {
        return this.getReferredDefaultValue(def);
      }
    }
  }]);

  return Schema;
}();

var SchemaLoader =
/*#__PURE__*/
function () {
  function SchemaLoader() {
    _classCallCheck(this, SchemaLoader);

    this.schemas = {};
    this.ajv = new Ajv({
      nullable: true
    });
  }

  _createClass(SchemaLoader, [{
    key: "getSchema",
    value: function getSchema($id) {
      return this.schemas[$id];
    }
  }, {
    key: "addSchema",
    value: function addSchema(def) {
      if (!Object.prototype.hasOwnProperty.call(def, '$id')) {
        throw new Error('The schema definition does not have an $id field');
      }

      this.ajv.addSchema(def);
      this.schemas[def.$id] = new Schema(this, def);
    }
  }, {
    key: "removeSchema",
    value: function removeSchema($id) {
      this.ajv.removeSchema($id);
      delete this.schemas[$id];
    }
  }, {
    key: "compileValidator",
    value: function compileValidator($id) {
      return this.ajv.compile(this.schemas[$id].def);
    }
  }]);

  return SchemaLoader;
}();

function traverseObj(obj, targetKey, handler) {
  if (Array.isArray(obj)) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var child = _step.value;
        traverseObj(child, targetKey, handler);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  } else if (_typeof(obj) === 'object') {
    for (var key in obj) {
      if (key === targetKey) {
        handler(obj[key]);
      } else {
        traverseObj(obj[key], targetKey, handler);
      }
    }
  }
}

SchemaLoader.load = function (rootSchemaDef) {
  var resolveDirs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (!Array.isArray(resolveDirs)) {
    resolveDirs = [resolveDirs];
  }

  resolveDirs.push(path.join(__dirname, '../schema/'));
  var loader = new SchemaLoader();
  loader.addSchema(rootSchemaDef);

  function handler($ref) {
    if (typeof $ref !== 'string') {
      throw new Error('Invalid schema reference id: ' + JSON.stringify($ref));
    }

    if (loader.getSchema($ref)) {
      return;
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = resolveDirs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var dir = _step2.value;
        var def = void 0;

        try {
          def = require(path.join(dir, $ref));
        } catch (e) {
          continue;
        }

        if (_typeof(def) !== 'object' || def.$id !== $ref) {
          continue;
        }

        loader.addSchema(def);
        traverseObj(def, '$ref', handler);
        return;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
          _iterator2["return"]();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    throw new Error('Cannot find schema definition ' + $ref + '.\n' + 'Please check if the file exists and its $id is correct');
  }

  traverseObj(rootSchemaDef, '$ref', handler);
  return loader;
};

module.exports = {
  Schema: Schema,
  SchemaLoader: SchemaLoader,
  DefaultValue: DefaultValue
};