"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var path = require('path');

var semver = require('semver');

var Migration =
/*#__PURE__*/
function () {
  /**
   * @param {string} version Target version
   * @param {string} head File name of the previous migration
   */
  function Migration(version, head) {
    _classCallCheck(this, Migration);

    this.head = head;
    this.version = version;
  }

  _createClass(Migration, [{
    key: "upgrade",
    value: function upgrade(config) {
      throw new Error('Not implemented!');
    }
  }, {
    key: "migrate",
    value: function migrate(config) {
      var result = this.upgrade(config);
      result.version = this.version.toString();
      return result;
    }
  }]);

  return Migration;
}();

var Migrator =
/*#__PURE__*/
function () {
  function Migrator(root) {
    _classCallCheck(this, Migrator);

    this.versions = [];
    this.migrations = {};
    var head = 'head';

    while (head) {
      var migration = new (require(path.join(root, head)))();

      if (!(migration instanceof Migration)) {
        throw new Error("Migration ".concat(head, " is not a Migration class."));
      }

      if (!semver.valid(migration.version)) {
        throw new Error("".concat(migration.version, " is not a valid version in ").concat(head));
      }

      this.versions.push(migration.version);
      this.migrations[migration.version.toString()] = migration;
      head = migration.head;
    }

    this.versions.sort(semver.compare);
  }

  _createClass(Migrator, [{
    key: "getLatestVersion",
    value: function getLatestVersion() {
      if (!this.versions.length) {
        return null;
      }

      return this.versions[this.versions.length - 1];
    }
  }, {
    key: "isOudated",
    value: function isOudated(version) {
      return this.getLatestVersion() && semver.lt(version, this.getLatestVersion());
    }
  }, {
    key: "migrate",
    value: function migrate(config) {
      var _this = this;

      var toVersion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var fVer = config.version;
      var tVer = toVersion || this.getLatestVersion(); // find all migrations whose version is larger than fromVer, smaller or equal to toVer
      // and run migrations on the config one by one

      return this.versions.filter(function (ver) {
        return semver.gt(ver, fVer) && !semver.gt(ver, tVer);
      }).sort(semver.compare).reduce(function (cfg, ver) {
        var migration = _this.migrations[ver.toString()];

        var result = migration.migrate(cfg);

        if (typeof callback === 'function') {
          callback(cfg.version, migration.version);
        }

        return result;
      }, config);
    }
  }]);

  return Migrator;
}();

Migrator.Migration = Migration;
module.exports = Migrator;