{"posts":[{"title":"2019年股市收官总结：上班多了一丝期待","text":"不知从何时起，上班比放假多了一丝期待，就是因为股市只在工作日开盘。虽然折腾了一年没赚到钱，但其中带来的刺激，是我去年买基金所不能比拟的。 总的来说，2019年的股市历程可以分为三个阶段。 第一阶段：场外基金从2018年5月开始定投基金，到2019年12月场外基金全部清仓，通过基金定投这个平摊风险的方式，我开始间接感受到股市的波动起伏。 不过，严格来说，我将重心从基金定投撤出来是2019年7月，分别清仓了沪深300、中证500、中证红利这三只重仓的指数基金。 至于收益，除去2018年的亏损和融资成本基本就没多少钱了。 从上图中可以看到，其实收益最高点在4月初，随后大盘开始一路下跌，不过当时我没有止盈，挺可惜的。 第二阶段：场内基金在刚接触场内基金时，我完全是凭感觉在交易，看见哪只ETF顺眼就买哪只，导致吃了一个大亏。 同样是在四月初买入了券商ETF，随着大盘势弱，券商的表现可想而知，完全被深套进去了。 不过，最傻的是我为了将账户从华泰转移至长江，直接割肉清仓了。这一顿操作直接将场外基金的收益全部抵消，还要倒贴一笔钱。 第三阶段：股票2019年5月开始尝试购买股票，不过同样是瞎子摸象，利用空闲时间学习股票的一些基本知识。 当时不知道买什么，也不敢买太多，因此画面是这样的。 经过半年的熟悉后，我才开始放开一些手脚，去尝试市面上各种各样的交易方法。（后果就是温氏股份被套20个点） 由于12月股市行情好转，终于赚了一点钱（大部分是浮盈） 遗憾的是，连沪深300都没有跑赢，也不知道整天在折腾啥？ 寄语2019年结束了，2020年希望凭借不断地学习和积累的经验做到平均每月稳定盈利1000元，沪深300就是我的目标！希望能在市面上五花八门的交易方法中找到最适合自己的一款，不求大赚，小盈即可。","link":"/a3be8a0b/"},{"title":"CODING企业版持续集成+自动部署HEXO博客","text":"用了一段时间的GitHub Pages发现确实速度比较慢，即便优化再多也不能从根本上进行改善。于是这几天尝试在CODING企业版对本站进行持续集成+自动部署。 然后，这个过程并不顺利… 方法一：hexo d一开始我参考github actions的方法，先持续集成，接着通过hexo d命令推送到master分支，再进行自动部署。然而，最终卡在了hexo d这一步。 我反复搜索了网上的资料，唯一相关的一篇官方推荐文章也是这么操作的，详见：《使用 CODING 进行 Hexo 项目的持续集成》，但是没有提到过SSH权限受限的问题。 根据我的逻辑，SSH就是一对密钥，将公钥放到被推送的仓库，私钥放到持续集成的工作空间就行了。 而coding的持续集成是通过调用凭据来进行验证的，但是这么设置后依然无效。 思考过后，我觉得可能是密钥的生成方式有问题，因为我并不是在持续集成的工作空间生成的，而是通过外部cloud studio用ssh-keygen -f命令生成一对密钥。（但github也是如此操作的，却有效） 最终我尝试切换到https方式推送，却忘记了git密码…话说这个密码究竟是啥？难道不是coding账户的密码吗？也没找到忘记和重置密码的资料。 于是方法一无疾而终… 方法二：项目令牌这里参考的方法是：《coding持续集成部署hexo博客》 与前文的区别是，这里去掉了hexo d的步骤，而是通过项目令牌的方式直接将public文件夹推送到master分支。 并且这里用到了docker的方式，具体原理我就不清楚了。 不过，只要参考原文的步骤，确实能实现持续集成+自动部署的目的。 持续集成记录： 只是目前耗时较长，github那边只要1分钟就能完成。 自动部署记录： 后语最后要吐槽的一点是，coding pages的二级域名为什么不是用户名，而是随机生成的一串字符？","link":"/2724904e/"},{"title":"ETF网格交易法：中概互联","text":"今天卖掉了建仓半年的中概互联，期间通过网格交易法实现了13次交易，虽然交易频率较低并且金额较少，但确实有可取之处。 网格交易所谓网格交易实际上就是高抛低吸，只不过通过量化的规则来进行交易，而非人为的主观判断。 通过注册华宝证券的条件单来使用网格交易，可以实现全自动，不需要人工盯盘。 不过，由于很久以前注册过华宝的客户号，导致无法通过渠道享受佣金优惠，因此我只是注册了模拟条件单，然后通过其他证券账户来手动交易。 中概互联中概互联应该是我持仓最近的ETF基金，从2019年7月10日建仓，一共交易了13次。 期间尝试增加每格的资金量，不过每笔交易的收益还是较少。 直到2019年11月进行锁仓（只买不卖，调高卖出条件），锁仓后的涨幅为16%，如果不锁的话可能会触发几次卖出，导致收益减少。 收益春节临近，这几天进行了大幅度的减仓，连中概互联也卖了。整体来看，这个收益水平我还是挺满意的，希望后面不要卖飞啦！ 总结ETF网格交易法很适合震荡行情，通过不断高抛低吸来降低持仓成本。但如果遇到单边行情，需要判断趋势进行手动锁仓。另外，如果资金量较少的话，那么一定要取消交易佣金最低5元的限制。","link":"/df41e991/"},{"title":"Icarus主题更新至3.0版本","text":"距离2.0版本更新已经有一年多的时间，前几天作者终于发布了3.0版本。对我来说，最大的改变在于主题结构重构以及语法切换，icarus3.0版本的代码从ejs变成了jsx，另外引入了hexo-component-inferno插件。但是，经过我不懈的努力，终于将主题修改成了2.0的模样… themes/icarus/layout/common/footer.jsx修改：去掉网站logo，另外调大了字体，添加了诗词一言。 123456&lt;div class=&quot;level&quot;&gt;&lt;div class=&quot;level-start&quot;&gt;&lt;script src=&quot;https://sdk.jinrishici.com/v2/browser/jinrishici.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;span dangerouslySetInnerHTML={{ __html: `&amp;copy; ${siteYear} ${author || siteTitle}` }}&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;&lt;br /&gt;&lt;span id=&quot;jinrishici-sentence&quot;&gt;正在加载....&lt;/span&gt; themes/icarus/layout/common/scripts.jsx修改：将main.js替换为cdn链接 12&lt;Plugins site={site} config={config} page={page} helper={helper} head={false} /&gt;&lt;script src={url_for('https://cdn.jsdelivr.net/gh/tiexo/tiexo.github.io/js/main.js')} defer={true}&gt;&lt;/script&gt; themes/icarus/layout/common/head.jsx修改：将default.css替换为cdn链接 123 &lt;link rel=&quot;stylesheet&quot; href={fontCssUrl[variant]} /&gt;&lt;link rel=&quot;stylesheet&quot; href={url_for('https://cdn.jsdelivr.net/gh/tiexo/tiexo.github.io/css/' + variant + '.css')} /&gt;&lt;Plugins site={site} config={config} helper={helper} page={page} head={true} /&gt; themes/icarus/layout/common/article copy.jsx修改：新增文件，移除about页面的标题（删除article.jsx下列代码） 1234{/* Title */}&lt;h1 class=&quot;title is-3 is-size-4-mobile&quot;&gt;{index ? &lt;a class=&quot;link-muted&quot; href={url_for(page.link || page.path)}&gt;{page.title}&lt;/a&gt; : page.title}&lt;/h1&gt; themes/icarus/layout/page.jsx修改：替换page引用模板 1const Article = require('./common/article copy'); themes/icarus/layout/comment/valine-admin.js修改：新增文件，点击valine通知邮件跳转至评论位置 12345678910if (window.location.hash) { var checkExist = setInterval(function () { if ($(window.location.hash).length) { $('html, body').animate({ scrollTop: $(window.location.hash).offset().top - 90 }, 1000); clearInterval(checkExist); } }, 100);} themes/icarus/layout/comment/valine.js修改：新增文件（复制node_modules/hexo-component-inferno/lib/view/comment/valine.js，并修改） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455var _require2 = require('hexo-component-inferno/lib/util/cache'),cacheComponent = _require2.cacheComponent;_createClass(Valine, [{ key: &quot;render&quot;, value: function render() { var _this$props = this.props, appId = _this$props.appId, appKey = _this$props.appKey, notify = _this$props.notify, verify = _this$props.verify, enableQQ = _this$props.enableQQ, placeholder = _this$props.placeholder, _this$props$avatar = _this$props.avatar, var js = &quot;new Valine({\\n el: '#valine-thread' ,\\n notify: &quot;.concat(notify, &quot;,\\n verify: &quot;).concat(verify, &quot;,\\n appId: '&quot;).concat(appId, &quot;',\\n appKey: '&quot;).concat(appKey, &quot;',\\n placeholder: '&quot;).concat(placeholder, &quot;',\\n avatar: '&quot;).concat(avatar, &quot;',\\n avatarForce: &quot;).concat(avatarForce, &quot;,\\n meta: &quot;).concat(JSON.stringify(meta), &quot;,\\n pageSize: &quot;).concat(pageSize, &quot;,\\n visitor: &quot;).concat(visitor, &quot;,\\n enableQQ: &quot;).concat(enableQQ, &quot;,\\n highlight: &quot;).concat(highlight, &quot;,\\n recordIP: &quot;).concat(recordIp, &quot;\\n });&quot;); return (0, _inferno.createFragment)([(0, _inferno.createVNode)(1, &quot;div&quot;, &quot;content&quot;, null, 1, { &quot;id&quot;: &quot;valine-thread&quot; }), (0, _inferno.createVNode)(1, &quot;script&quot;, null, null, 1, { &quot;src&quot;: &quot;//cdn.jsdelivr.net/gh/tiexo/tiexo.github.io@blog/themes/icarus/layout/comment/valine-admin.js&quot; }), (0, _inferno.createVNode)(1, &quot;script&quot;, null, null, 1, { &quot;src&quot;: &quot;//cdn.jsdelivr.net/npm/valine/dist/Valine.min.js&quot; }), (0, _inferno.createVNode)(1, &quot;script&quot;, null, null, 1, { &quot;dangerouslySetInnerHTML&quot;: { __html: js } })], 4); } } ]);return Valine;}(Component);Valine.Cacheable = cacheComponent(Valine, 'comment.valine', function (props) { var comment = props.comment, helper = props.helper; return { appId: comment.app_id, appKey: comment.app_key, notify: comment.notify, verify: comment.verify, enableQQ: comment.enableQQ, placeholder: comment.placeholder, avatar: comment.avatar, avatarForce: comment.avatar_force, meta: comment.meta, pageSize: comment.page_size, visitor: comment.visitor, highlight: comment.highlight, recordIp: comment.record_ip };});module.exports = Valine; themes/icarus/scripts/index.js修改：删除icarus提示字样 themes/icarus/layout/search/insight.js修改：新增文件（复制node_modules/hexo-component-inferno/lib/view/search/insight.js，并修改），替换cdn链接 123var _require2 = require('hexo-component-inferno/lib/util/cache'),cacheComponent = _require2.cacheComponent; 12contentUrl: helper.url_for('https://cdn.jsdelivr.net/gh/tiexo/tiexo.github.io/content.json'),jsUrl: helper.url_for('https://cdn.jsdelivr.net/gh/tiexo/tiexo.github.io/js/insight.js') themes/icarus/layout/plugin/animejs.jsx修改：替换cdn链接 1jsUrl: helper.url_for('https://cdn.jsdelivr.net/gh/tiexo/tiexo.github.io/js/animation.js') themes/icarus/layout/plugin/back_to_top.jsx修改：替换cdn链接 1jsUrl: helper.url_for('https://cdn.jsdelivr.net/gh/tiexo/tiexo.github.io/js/back_to_top.js') themes/icarus/include/style/base.styl修改：调大、修改字体 12345$body-size ?= 16px$body-background-color ?= #f7f7f7$family-sans-serif ?= Ubuntu, Roboto, 'Open Sans', 'Source Han Sans CN', sans-serif$family-code ?= 'Source Code Pro', monospace, 'Source Han Sans CN' themes/icarus/include/style/navbar.styl修改：调整m端导航栏样式 123456789101112131415161718.navbar-main box-shadow: $shadow &amp; &gt; .container display: flex .navbar-menu, .navbar-start, .navbar-end align-items: stretch display: flex padding: 0 flex-shrink: 0 +until($navbar-breakpoint) .navbar-menu box-shadow: none.navbar-logo img max-height: $logo-height node_modules/hexo-component-inferno/asset/js/insight.js修改：调整搜索框显示数量 123456return {posts: posts.filter(filters.post).sort((a, b) =&gt; { return weights.post(b) - weights.post(a); }).slice(0, 30),pages: pages.filter(filters.page).sort((a, b) =&gt; { return weights.page(b) - weights.page(a); }).slice(0, 0),categories: categories.filter(filters.category).sort((a, b) =&gt; { return weights.category(b) - weights.category(a); }).slice(0, 0),tags: tags.filter(filters.tag).sort((a, b) =&gt; { return weights.tag(b) - weights.tag(a); }).slice(0, 0)}; source/about/index.md修改：增加bgm 123456&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&quot;&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js&quot;&gt;&lt;/script&gt; &lt;meting-js auto=&quot;https://music.163.com/#/song?id=1438865533&quot; fixed=&quot;true&quot; autoplay=&quot;true&quot;&gt;&lt;/meting-js&gt;","link":"/faca3062/"},{"title":"九阴九阳，神奇9转！","text":"各大股票交易软件都推出了许多技术指标，虽然大部分都是收费的，但也有一些免费、有趣的指标，譬如同花顺的神奇9转。 设置 PC APP 原理当连续有9根K线的收盘价分别比各自之前第4根K线低/高时，则会出现神奇9转，听起来有点像九阴九阳，实际上未必是9根连续的阴线或阳线。 因此神奇9转分为上涨、下跌两种信号，如果出现红色数字9则代表买入信号、绿色数字9则代表卖出信号。 红色数字9 正面 负面 在出现红色数字9的时候买入，可能会抄底成功，也可能抄在半山腰。 绿色数字9 正面 负面 在出现绿色数字9的时候卖出，可能会逃顶成功，也可能会卖飞了。 分析综合上面案例来看，神奇9转明显不是一个万能的指标，当然，世上本就不存在百分百正确的指标。 所以我们必须结合其他指标或者策略来使用。 应用对象必须是一只好股票 选择基本面好的股票作为神奇9转的应用对象，即便入场信号错误，也有机会涨回来，大不了当价值投资。 控制仓位 建仓的时候控制好仓位，只要手里资金充足就不存在被套的可能。 控制加仓节奏 如果第一个红色9出现后行情没有反转，即便接着出现第二个红色9也要控制加仓节奏，等到亏损十个点再考虑加仓。 不要贪心 如果出现绿色9且盈利较多的情况下，一定要减仓或清仓，即便之后卖飞了也不要懊恼，保持良好的心态才能长久赚钱。 好了，以上说的都是屁话，因为我自己还没赚到钱呢！","link":"/63672be9/"},{"title":"使用QQ空间相册生成图片外链","text":"图片外链是每个博客都要折腾的项目，我曾经使用过七牛、SM图床、微博图床等等，但七牛域名需要备案并且HTTPS流量收费，SM和微博则对图片尺度限制较大，连本站不露点的动漫图片都会被和谐。 这个时候，我终于回想起曾经在狐吧看到的QQ空间相册外链项目… QQ空间相册外链项目目前该项目由Windows软件版和GM脚本版，地址分别如下： Qzone-Photo-Outside QQ相册外链工具 两个版本都比较简陋，但这些都不是重点，因为QQ空间的确有独到的优势。 支持HTTPS，这是大势所趋。 稳定，除非QQ空间关闭或者接口被封。 高速，QQ空间图片的加载速度绝对是一流的。 限制少，不会动不动就和谐。 保留原文件，像SM图床和微博图床都无法保留原文件。 所以，我把本站的所有图片全部迁移到QQ空间啦。 使用实际上外链工具只是提供链接转换，仍然需要我们手动把图片上传到QQ空间相册里面。 选择原图上传 根据作者提醒，必须选择原图上传，但是对访问权限无限制。 复制链接 如果你用的GM脚本版，那么将鼠标移动到图片缩略图上面会显示“外链”字样，点击后会自动复制链接（无任何提示）。 如果你用的是软件版，那么需要手动复制QQ空间图片链接，然后去软件点击粘贴，接着会自动复制转换后的外链。 具体效果可以看看本站，根据作者所说已经稳定使用9年，应该没什么问题！","link":"/e4ed098a/"},{"title":"全网最真实的股票交流群","text":"QQ群名：十九届韭菜委员会 QQ群号：589821218 群二维码： 群规： 1、本群建立初衷是为了交流、学习股票相关知识，目的是大家实现共同进步，摆脱韭菜的身份。 2、本群禁止任何形式的收费或免费业务，包括但不限于开户、配资、荐股、加群、代客理财等。 3、本群不欢迎任何利益相关方加入，包括但不限于业务员、大V、老师、营销人员等。 4、本群禁止任何违反法律法规的言行，不能影响群内友好、团结、和谐的氛围。 5、本群不建议股神加入，因为无法提供与你身份匹配的服务，热心助人的除外。 6、本群不建议炒股没亏过钱的朋友加入，因为你还不算韭菜，赶紧收手！ 如违反以上条例，管理人员有权根据情节轻重作出撤回消息、禁止发言、移出本群等处理。","link":"/ec97dcac/"},{"title":"关于融资成本的教训与思考","text":"今天心血来潮计算了一下18年和19年的融资成本，结果令我大跌眼镜！每天被账户的浮盈遮蔽了双眼，没想到在除去各种成本和亏损后，实际上根本没赚到钱。 信用卡19年信用卡消费金额为31W+，手续费为1600+，减去掌上生活送的红包，实际成本为1400+。 由于云闪付占比较少，因此总体费率还是接近0.53%。 按照资金可占用周期为40天来算，那么信用卡的融资成本为5%，在目前的渠道中算是最低的了。如果搭配三湘银行的活期产品，那么可以将闲置资金的成本降至1% 所以在2020年信用卡将成为我唯一 的融资渠道。 贷款18年和19年的贷款主要是借呗和招行闪电贷。 其中借呗日利率为万3.5，当时碰上老用户六折优惠，实际利率为万2.1，折合年利率为7.6%，期间共支出利息为1800+。 而招行闪电贷的年利率为11.5%，期间支出利息为700+。 这样一比较明显比信用卡高出很多，只不过借呗可以先息后本，相对来说还款压力更小。 总结所以说，千万不要被一时运气导致的收益率而蒙蔽，认为自己背负十几个点的融资成本还能赚钱。只有认清现实、认清差距才能不断进步，加油！","link":"/66b05c57/"},{"title":"利用Jsdelivr实现Github Pages静态文件CDN加速","text":"CDN加速不是一个新鲜的话题，但是受限于免费、无备案域名等因素，实际上并没有什么选择。直到偶然发现Jsdelivr竟然可以对整个Git仓库进行CDN加速后… 图片图片的CDN方案有很多，这里就不讨论了，本站使用QQ空间作为图床，速度应该是顶尖的。 有兴趣的可以访问：《使用QQ空间相册生成图片外链》 公共JS/CSS库公共库也有不少选择，比如七牛、360、Loli等。 本站除了Fontawesome使用七牛外，其他的都是Loli CDN。 私人文件本文今天介绍的主要是私人文件，譬如Github Pages仓库中CSS和JS两个文件夹里面的JS和CSS文件，以及搜索插件生成的JSON文件等。 其请求链接为 1https://tiexo.github.io/js/xxx.js 在主题引用处找到代码 1&lt;%- _js('js/xxx', true) %&gt; 将其修改为 1&lt;%- _js('https://cdn.jsdelivr.net/gh/tiexo/tiexo.github.io/js/xxx', true) %&gt; 其原理就是Jsdelivr会将所有Git仓库中的文件CDN化，我们使用文件的CDN链接替换其自身的链接，从而实现了CDN加速。 难点主要在于找到主题目录中的引用代码，之后直接按照格式替换链接即可。 具体格式为 1https://cdn.jsdelivr.net/gh/用户名/仓库名/文件路径 缺点CDN都是有缓存的，可能修改某处文件后网站页面不会及时更新。 优点至少比github.io要快吧？","link":"/1e1b3df9/"},{"title":"升级gulp-babel版本至8.0.0","text":"某次我使用npm-check -u命令时，提示gulp-babel可以升级至8.0.0，升级后就是一堆连环报错，我只能暂时回退版本。今天恰巧碰见一篇相关的资料，终于顺利升级。 升级gulp-babel版本在《通过Github Actions使用Gulp压缩静态文件》一文中介绍了通过gulp来压缩网站静态文件，当时使用的版本为gulp-babel@7.0.1，实际上最新版本为8.0.0，但是直接升级会报错。 根据最新资料的解决办法，首先安装新版 gulp-babel 和相关依赖。 1npm install --save-dev gulp-babel @babel/core @babel/preset-env 修改gulpfile.js文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667var gulp = require('gulp');var minifycss = require('gulp-clean-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var babel = require('gulp-babel');// 压缩 public 目录 cssgulp.task('minify-css', function() { var option = { rebase: false, //advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）] compatibility: '*', //保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式] //keepBreaks: true, //类型：Boolean 默认：false [是否保留换行] //keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀 } return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));});// 压缩 public 目录 htmlgulp.task('minify-html', function() { var cleanOptions = { protect: /&lt;\\!--%fooTemplate\\b.*?%--&gt;/g, //忽略处理 unprotect: /&lt;script [^&gt;]*\\btype=&quot;text\\/x-handlebars-template&quot;[\\s\\S]+?&lt;\\/script&gt;/ig //特殊处理 } var minOption = { collapseWhitespace: true, //压缩HTML collapseBooleanAttributes: true, //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt; removeEmptyAttributes: true, //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt; removeScriptTypeAttributes: true, //删除&lt;script&gt;的type=&quot;text/javascript&quot; removeStyleLinkTypeAttributes: true,//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot; removeComments: false, //清除HTML注释 minifyJS: true, //压缩页面JS minifyCSS: true, //压缩页面CSS minifyURLs: true //替换页面URL }; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin({ removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, })) .pipe(gulp.dest('./public'))});// 压缩 public/js 目录 jsgulp.task('minify-js', function() { return gulp.src('./public/**/*.js') //↓下面这些是新增的 .pipe(babel({ presets: ['@babel/env'] })) //↑上面这些是新增的 .pipe(uglify()) .pipe(gulp.dest('./public'));});// 执行 gulp 命令时执行的任务// gulp 4.0 适用的方式gulp.task('default', gulp.parallel('minify-html', 'minify-css', 'minify-js' //build the website)); 删除.babelrc&amp;修改package.json删除.babelrc文件，同时删除package.json文件中的依赖项。 12&quot;babel-plugin-transform-remove-strict-mode&quot;: &quot;0.0.2&quot;,&quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;, 另外，安装gulp-clean-css插件，移除之前的gulp-minify-css和gulp-imagemin插件。 因为我搜索了一下，发现gulp-minify-css已经被弃用了，而图片压缩本站也用不上，因此一并删除。 解决JS生成路径错误原文代码是： 123// 压缩 public/js 目录 jsgulp.task('minify-js', function() { return gulp.src('./public/js/**/*.js') 这会导致压缩后的js文件直接出现在./public文件夹，而不是覆盖./public/js/目录中的文件，也就是说会存在两个相同的js文件。 解决办法是修改成： 123// 压缩 public/js 目录 jsgulp.task('minify-js', function() { return gulp.src('./public/**/*.js')","link":"/dd1aca07/"},{"title":"可转债打新，堪称捡钱","text":"A股打新的收益全球闻名，不过由于中签率太低且与市值挂钩，实际上很多人都没有吃到过肉。但是近年来可转债的打新却变得越来越火热，堪称捡钱。 可转债可转债是一种债券，到期后可以根据协议的价格转换成股票，所以叫做可转债。 它与股票的不同之处在于，可转债是有保底收益的，即便在二级市场上价格不断下跌，只要持有到期也不会亏损，甚至收益比银行不差。 但如果股票价格一路上涨，那么就可以获得较高的收益，所以它是进可攻、退可守的品种。 打新当然，上面没看懂也没关系，只要注册一个股票账号（最好开通创业板权限），接着根据券商APP的提示每天看一下有没有新债申购就行了。 闭上眼—最大市值申购—中签—缴款—上市开盘卖出即可。 收益每只可转债占用资金为1000元（中一签），占用时间大概是半个月，收益大概是100-300元。 当然，如果你能发动亲朋好友都注册一个账号，那么中签的数量也就越多，收益也就越高。 按照2019年的行情来看，一个账号光是申购可转债的收益都有3、4000元，运气好的5000元都不在话下。 个人操作由于我醒悟的比较晚，19年10月份才申购了第一只可转债，最终上市收益是220元。 2019年总共卖出了6只转债，一共赚了800+元。 不过，1月份又卖出了2只，目前手里还有6只，毕竟是白捡的，我也满足了。 当然，随着可转债这个宝藏被越多越多人发现，现在申购的人已经翻倍了，意味着今年的中签率也会减少一半…所以大家珍惜吧！","link":"/43f5457b/"},{"title":"基金进阶计划之场内交易","text":"接触基金定投已经快9个月，虽然一直在亏钱，但是并没有妨碍我对指数的信心。只是昨天在比较基金收益时，发现自己选择的沪深300增强基金表现较差，因此产生了更换另一只沪深300的念头。 在纠结的过程中，我发现似乎由场外交易转向场内交易，是一个不错的选择。 沪深300增强指数基金作为一个新手，在第一次挑选基金的时候难免会被“网红姬”吸引，所以选择了景顺长城沪深300增强定投。 可是2018年它的表现相比2017年差了很多，对比其他两只同类基金，增强效果微乎其微，即便在整个跟踪沪深300的基金中表现也很一般。 所以，我产生了更换为兴全沪深300指数（LOF）定投的念头，但是由于蚂蚁金服并没有开通这两只基金的超级转换，所以必须要先赎回再申购，这中间还要付出0.62%的手续费。 场内交易我注意到，兴全沪深300指数是一只LOF基金，同时也支持在场内交易。 既然如此，我为什么不直接在场内购买呢，这样成本也更加便宜。 交易成本所谓场内交易，就是通过股票账户在证券交易所买入和卖出，因此只需要支付佣金即可，而无需支付场外的申购费和赎回费。 目前券商佣金在万2.5-万3左右，也就是说买入卖出1万元基金，手续费是6元钱。 而场外申购费率为0.12%，赎回费率为0.5%，同样买入卖出1万元基金，手续费是62元钱。 但是这中间还存在一个问题，大部分券商都有单笔交易佣金最低5元的限制，也就是说实际上手续费要花10元钱。 即便如此，两者之间的成本差异也是比较大的，如果能去掉最低5元的限制就更好了。 券商虽然大部分都有最低限制，但也意味着有些券商取消了限制，譬如东方财富、华泰证券等。 甚至有网友评论说东方财富不仅没有最低5元限制，而且场内基金交易佣金为万1，吸引力确实挺大。 但我依然选择了华泰证券… 因为我在上一篇文章说过，目前名下沪A账户已经达到上限，所以无法在其他券商进行开户。 但是华泰证券可以在开户时选择下挂`沪深基金账户`，而无需开通沪A股东账户，这意味着我可以单独通过华泰来交易场内基金。 虽然华泰证券手机开户佣金是万3，但场内基金交易手续费最低只要0.1元，比较适合进行小资金定投。","link":"/c1adca3d/"},{"title":"收益率计算：净值法 VS XIRR","text":"虽然对于钱少的我来说收益率意义不大，但是通过计算收益率可以提高自我信心，同时也能看出收益与成本的差异，从而适当调节杠杆水平。经过最近的研究，我发现净值法和XIRR是目前比较主流客观的收益率计算方法，今天就来简单谈谈吧。 一、账户收益率显示目前能够直观看到我股票账户收益率的APP有两个：同花顺和长江e号，不过两者存在一些差异。 很明显，它们有一个是错的，或者两个都是错的。所以我打算抛弃它们，自己来进行计算。 二、净值法所谓净值法就是将账户看作是一只基金，初始净值为1，初始份额与总资产一样。 日后若随着股票上涨，则总资产也会上涨，但份额不变，因此净值也会上涨。 如果期间进行资金转入、转出，则将其转换为份额的增加和减少，变动份额等于变动资金量除以当时的净值。 不过，它存在一个致命缺陷： 如初始资金10w，净值从1涨到5时，增加资金90w，然后净值从5跌到2。 单纯从净值看，1变成2赚了一倍，但实际上按本金计算，是亏损的。 这是因为基金经理只负责未赎回部分的收益率，至于赎回部分是赚是亏对他没有影响，所以基金的业绩可以用净值法。而我们个人却要对赎回部分的盈亏负责，所以会出现上面净值赚、本金亏的情况。 三、XIRR第一次接触XIRR是2018年使用基金定投的时候，可以用来计算不定时买入卖出不定额资金的年化收益率。 如1月1日买入1万元，1月10日资产变成了1.2万元，此时赎回1万元，1月31日资产为1800元。 通过XIRR计算的年化收益率为114%。 它正好可以弥补净值法不能有效反映买入卖出部分盈亏的缺陷，而且考虑了资金占用时间的因素，对于频繁转入转出的我来说非常适用。 同样是这个案例，如果用净值法来计算： 1/1，净值为1，份额为1万，资产为1万； 1/10，净值为1.2，份额为1667，资产为2000； 1/31，净值为1.08，份额为1667，资产为1800。 那么净值法的收益率为8%，折算成年化收益率为96%。 四、且慢小账本当然，你可以通过excel表格来记录以上两种方法的收益率，不过由于手机操作不便，所以我找了一个”且慢小账本”的微信小程序。 只要输入每个交易日的总资产，记录好每笔资金转入转出的操作，它就会自动计算账户的净值和XIRR收益率，有兴趣的可以试试。","link":"/c02d8c7e/"},{"title":"教你如何抄基金和外资的作业","text":"由于我的股票池都是抄作业得来的，主要是参考一些优秀基金经理的持仓和陆股通的持仓，所以每季度都需要进行跟踪，之前我是采用手动EXCEL表格法，这两天尝试通过一些工具来实现。 Choice金融终端当我们通过榜单获取一批基金名称或代码后，先下载choice将其导入到自选股里面 自选股列表右键—设置自选股—选择粘贴导入或者文件导入—查看匹配结果确认即可 接着点击基金菜单—基金筛选，左下角双击自选股添加成分，接着在待选指标中选择：基金前十大重仓股名称 然后编辑前十大重仓股指标的参数，如果想要获取最新的数据，直接选择最新一期即可 最后一步，右上角选择Excel表格导出即可 当然，表格数据还需要处理下，首先将持仓这一列通过智能分组，变成每只个股占一列 然后将多列合并为一列即可，这里推荐一个简单的方法，在C列最下面一格空白处输入“=D1”，再将鼠标顺着单元格往下拉即可，这样D列的数据会自动拼接到C列。 同样的道理，等拖到某一格变为0时，再输入”=E1“，反复循环直到最后一列 通达信金融终端虽然我们获取到了一列个股数据，但尴尬的是，同花顺不支持txt和excel导入，所以我只能通过通达信来中转 打开通达信软件，选择免费用户直接登录即可（不需要账号），点击下方的自定义板块设置 接着选择上方的自选股，右下方导入板块选择从文本导入，将个股数据粘贴进去即可 待导入成功后，再点击导出板块，就能得到一份EBK文件啦 同花顺远航版打开同花顺软件，点击自选板块—版块管理—点击导入，系统会自动识别桌面的EBK文件，直接确认即可 OK，至此我们就完成了基金最新持仓数据加入到同花顺自选股的整个流程 策略板块另外，同花顺还支持添加策略板块，只要输入你的条件，如北上资金持仓比例前100名，就可以得到一份动态的数据，支持每日更新 当然，其它的条件大家也可以挖掘一下~ 结语我觉得基金+外资这两份持仓数据还是比较有参考意义的，毕竟在基本面研究分析上，人家要更加专业一些，可以大大减少踩雷的概率。同时他们的持仓在一定程度上也可以反映市场资金的偏好。 至于如何从这300只股票中选股….那也是我正在研究的课题","link":"/f2297245/"},{"title":"熟悉CODING企业版Cloud Studio的使用","text":"由于CODING推出了企业版，我预感之前使用的WEB IDE将会逐渐停止维护，因此提前熟悉一下新版Cloud Studio的使用。 注册企业版要想使用新版Cloud Studio必须先注册CODING 企业版，目前5人以下团体是免费的。 实际上如果单纯为了使用Cloud Studio，并不需要去研究CODING的项目体系，因为我的博客托管在Github，只是利用它来管理代码而已。 不过需要注意的是，新版Cloud Studio只能每天使用两个小时。 导入项目目前新版Cloud Studio不支持直接从Github导入仓库，因此只能通过git pull命令来实现。 记得将SSH公钥添加到Github仓库的Setting—Deploy keys里面。 安装Hexo选择默认的Node.js环境，根据官网命令安装即可，如果安装失败记得使用sudo命令。 使用由于新版Cloud Studio汉化不完全，而且配置选项跟之前有些差别，也耗费了我一些时间来摸索。 本地预览旧版是先输入hexo s命令，接着选择“访问链接—修改端口号为4000”，点击链接即可进行预览。 但是新版去掉了图形化的界面，反而没有之前方便了。 在菜单栏点击“查看—命令面板”，输入”preview“点击”generate preview config file“创建一个预览配置文件”.vscode/preview.yml“ 主要是修改port、run、root这三项 preview.yml123456789# .vscode/preview.ymlautoOpen: true # 打开工作空间时是否自动开启所有应用的预览apps: - port: 4000 # 应用的端口 run: hexo s # 应用的启动命令 root: ./public # 应用的启动目录 name: hexo s # 应用名称 description: 在线预览 # 应用描述 autoOpen: false # 打开工作空间时是否自动开启预览（优先级高于根级 autoOpen） 以后每次想要预览时，只需要点击“查看—命令面板”，输入”preview“点击”open preview tab“，选择”hexo s“即可。 点击”open in browser“可以在浏览器中打开新标签页。 不过，我发现修改某些文件后，预览页面并不会实时变动，而是要重新hexo g生成，还有待考察。 Git提交旧版是在“版本”中依次选择“提交—推送”即可，分别对应git commit和git push。 新版则是先在“源代码管理”提交commit 接着点击左下角的“同步按钮”，就会自动推送到git仓库了。 当然，你也可以直接输入git命令进行提交和推送。 总结使用新版Cloud Studio来管理hexo在功能上没有问题，只不过一些细节和交互还需要优化改进。 另外每天限制两小时的使用比较坑，所以我目前还在使用旧版，等最后关头再转移过去吧。","link":"/6ea6b07d/"},{"title":"网站恢复二级域名","text":"某天突然收到七牛发送的邮件，提醒我系统即将收回测试域名时，我就一直在思考如何处理由此引发的一系列问题，顺便再好好规划下网站以后的定位。今晚，我终于作出了决定并付诸了行动。 七牛测试域名被回收实际上我在七牛云注册过两个测试域名，一个是http另一个是https，而前者早在之前就被回收了，没想到后面这个一直在付费的域名也会被回收。 根据七牛云的规定，自定义域名必须进行备案，这意味着我将不能再使用七牛云的图床和CDN加速。 回归二级域名在这个时候我意识到，越来越多的平台需要备案域名，自定义域名反而成为了一种负担，这与我创建静态博客的初衷背道而驰，于是我决定回归到二级域名。 使用github提供的Pages服务，即从： 1www.tiexo.cn ==&gt; tiexo.github.io 使用Cloud Studio管理Hexo最近Coding将自己卖身给了腾讯云，于是我又开始使用Cloud Studio来管理Hexo，其实就是网站之前介绍过的WebIDE。 当然，之所以这么做的一个主要原因是，解决多平台管理的繁琐流程，况且每次电脑重装系统后又要重新安装Git、Hexo让我烦不胜烦。 如果它保持不收费的话，我必须推荐给大家。 解决的问题这次修改网站，中间也遇到了不少问题，例如： cloud studio推送后网站不更新 明明在仓库中看到推送成功，源文件也更新了，但网站页面一直没变化。 为此我还找coding反馈过，但是并没有解决这个问题。 今晚我突然发现，当我使用hexo d推送后，竟然整个hexo目录出现在coding-pages分支，按道理应该git push命令才会如此。 最后是手动将delopy和public两个文件夹删除，重新推送就好了…可能是某次同步分支时错乱导致的。 CDN资源引用地址变更 之前我都是将图片、JS和CSS文件直接上传到七牛云空间，然后引用外链生效，但七牛域名回收后必须将资源取回来。 好在测试域名虽然回收了，但之前上传的图片资源并没有失效，因此只要把CS和JS文件地址解决就行。 中间碰到的问题主要是，JS和CSS文件引用的相对路径，最终解决方案是分别扔到主题source/css和/js文件夹中。 页面布局 在最开始，我是打算将网站改成单页布局，但实际效果并不满意，无奈自己不懂CSS只能放弃了。 目前我心中比较满意的是微博头条文章的布局，可惜没看到类似的主题。 百度 包括百度统计和百度站长平台都需要修改配置，其中站长平台的网站改版还没弄好，因为之前直接将自定义域名解绑了，审核没通过，待会儿再试试。 网站定位之前本站都是以分享教程和记录折腾日记为主，但是今年来折腾的少，所以许久都没更新。 以后决定把自己的一些评论和总结都搬过来，因为受不了百度贴吧的删帖啦~ 最后，希望自己能加油更新，不忘初心！","link":"/5cf6b291/"},{"title":"股票账户的那点破事","text":"在购买基金半年后，我对股票有了一些冲动，虽然基金自从进场后已经亏了10个点，但大A股的春天应该快到了吧，我这样安慰自己。 股票销户炒股前的第一个准备工作自然是开户，可因为我几年前开通过3个银行证券账户，所以导致现在破事一大堆。 破事一：佣金费率高虽然这三个账户我没有交易过，但它的费率估计是千分之一，而目前网上开户的佣金费率只有万分之2.5，足足贵了4倍，我肯定不愿意接受。 破事二：销户必须去营业部虽然当时是网上开户的，但选择的营业部是之前生活的城市，现在早已经换了。 我不可能为了销户专门去一趟，并且根据网友反馈来看，销户的流程体验也非常糟糕，因此销户是暂时不可能了。 破事三：限制3个账户虽然股票开户账户数可以达到10个或者20个，但是上交所指定交易限制为3个。 这意味着我甚至不能开通新的账户，除非把之前的指定交易撤销，这跟销户没什么差别。 所以把这3个破事组合起来，就是现有账户不想用，新账户不能开，只能干看着。 好在前段时间就有报道说： 2019年3月将实现证券账户网上注销，到时一切问题都将迎刃而解！ 股票开户如果明年可以把银河证券的账户注销，那么需要重新开通一个股票账户，这就涉及到了选择券商的注意事项。 1. 交易软件我认为最重要的并非什么证券公司实力，而是支持的交易软件好不好用。 这就跟大家喜欢支付宝和微信，不喜欢银行APP一样，最好是选择一家第三方软件，譬如同花顺。 然而同花顺支持开户的券商和支持交易的券商是有限的，所以最好是从支持交易的券商里面选择。 今天我也尝试了一下微信推出的微信微证券和腾讯自选股，可是这两者数据并未打通，支持的券商都不一样，只能先放弃了。 2. 佣金佣金一般都是万2.5就够了，如果没有最低5元限制就更好啦。 3. 营业部在满足前两者的条件下，可以考虑选择一家本地有营业部的券商。 4. 实力在满足前三者的条件下，再选择一家实力最强的。 虽然目前基金还在亏损中，但我对指数还是有一定信心的，股票就不好说了，也许是一条不归路…","link":"/8f21d967/"},{"title":"要学会炒股，不单单是为了赚钱","text":"自从接触股票后，我时常在想，炒股对我们自身有什么影响？后来我觉得，一定要认真努力地学会炒股，这不单单是为了赚钱！ 一、政治经济股市和国家政治、经济政策密不可分，常常因为一个突发事件（譬如美伊冲突）而大跌，也会因为利好消息（譬如中美签署经贸协议）而暴涨，更别提政府出台的各种行业刺激政策，往往会催生出一大批牛股。 所以，如果你想学会炒股的话，肯定要关注世界和国家的政治经济领域，这无疑能提高自身的眼界和认知水平，从而做到和人侃侃而谈，显露出一股高深莫测的气质。 二、行业分析股票市场在不同时期对于不同行业有着不同的偏好，这里面有注重价值投资的，也有玩转周期股的，以及层出不穷的概念股。 如果你想要抓住一只牛股，那么对该股的行业必须进行认真的分析。譬如去年大热的猪肉股，就需要对养猪行业有一定的认识。 显然，这不仅能提高自身的分析能力，也许对你以后在挑选工作和创业方面都有一定的帮助呢。 三、财务分析对于绝大多数股民来说，财务报告无疑是认清某只股票最有效的来源，所以财务分析也是炒股必不可少的一项技能。 如果能够读懂包括营收、毛利润率、净利润、现金流、应收账款等在内看起来高大上的财务指标，相信也可以拿出去装逼了吧。 四、理财能力炒股这两个字听起来其实有点不务正业，但如果你把它看作是投资理财，那么瞬间就高大上了。 以前大家习惯把钱存银行，后来又买余额宝，那么现在呢？是时候去炒股了！ 现在大家普遍认为，未来十年的A股会跑赢楼市，所以，不管是为了资产增值还是保值，学会炒股已经势在必行。 五、学习态度我曾经听别人说，股民是非常特殊的一个群体，甚至凌晨几点钟还在复盘，就为了提高一丝自己的炒股水平。这种学习态度难道不值得我们推崇吗！真是一群可爱的人啊。 把刷抖音的时间用来研究股票，何乐而不为呢？ 六、兴趣爱好虽然有不少人将炒股作为职业，但是大部分人还是将其作为一项兴趣爱好，在不违法的前提下，我认为兴趣爱好越多生活才会越充实越多彩。 如果有一群韭菜和你天天讨论那就更棒了，哈哈。 七、良好心态其实炒股最重要的不是内幕消息，也不是技术分析，而是一个良好的心态。如果你能做到大涨、大跌都云淡风轻，能够做到知行合一，能够形成并坚定自己的投资理念，那么你甚至可以成为别人的人生导师。 同样，这份心态也可应用于工作、生活的方方面面，从而在跟别人竞争时占据一份优势。 好了，今天就瞎比比这么多~","link":"/1b1e956c/"},{"title":"通过Github Actions使用Gulp压缩静态文件","text":"虽然本站大部分静态文件都使用了CDN，但是一些html文件依然存在大量的空白字符。通过Github Actions既不用增加部署命令，又可以实现静态文件的压缩，何乐而不为呢？ 本地安装Gulp首先全局安装gulp 1npm install gulp -g 接着分别安装相关的html、js、css、image插件，后面这些主要是为了解决兼容的问题 12345678910111213npm install gulp --savenpm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save# 解决【Gulp打包问题】 GulpUglifyError: unable to minify JavaScript# 解决 gulp-uglify 压缩JavaScript 不兼容 es5 语法的问题npm install babel-core@6.26.3 --savenpm install gulp-babel@7.0.1 --savenpm install babel-preset-es2015@6.24.1 --save# gulp-babel 取消严格模式方法(&quot;use strict&quot;)npm install babel-plugin-transform-remove-strict-mode --save 创建gulpfile.js文件直接在根目录新建gulpfile.js文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');var imagemin = require('gulp-imagemin');var babel = require('gulp-babel');// 压缩css文件gulp.task('minify-css', function (done) { return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public')); done();});// 压缩html文件gulp.task('minify-html', function (done) { return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin({ removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, })) .pipe(gulp.dest('./public')); done();});// 压缩js文件gulp.task('minify-js', function (done) { return gulp.src(['./public/**/*.js', '!./public/**/*.min.js']) .pipe(babel({ //将ES6代码转译为可执行的JS代码 presets: ['es2015'] // es5检查机制 })) .pipe(uglify()) .pipe(gulp.dest('./public')); done();});// 压缩 public/images 目录内图片(Version&lt;3)// gulp.task('minify-images', function () {// gulp.src('./public/images/**/*.*')// .pipe(imagemin({// optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级）// progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片// interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染// multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化// }))// .pipe(gulp.dest('./public/images'));// });// 压缩 public/images 目录内图片(Version&gt;3)gulp.task('minify-images', function (done) { gulp.src('./public/images/**/*.*') .pipe(imagemin([ imagemin.gifsicle({interlaced: true}), imagemin.jpegtran({progressive: true}), imagemin.optipng({optimizationLevel: 5}), imagemin.svgo({ plugins: [ {removeViewBox: true}, {cleanupIDs: false} ] }) ])) .pipe(gulp.dest('./public/images')); done();});//4.0以前的写法 //gulp.task('default', [// 'minify-html', 'minify-css', 'minify-js', 'minify-images'//]);//4.0以后的写法// 执行 gulp 命令时执行的任务gulp.task('default', gulp.series(gulp.parallel('minify-html', 'minify-css', 'minify-js', 'minify-images')), function () { console.log(&quot;----------gulp Finished----------&quot;); // Do something after a, b, and c are finished.}); 创建.babelrc文件依然是在根目录新建即可 1234{ 'presets': ['es2015'], &quot;plugins&quot;: [&quot;transform-remove-strict-mode&quot;]} 修改Acitons配置文件修改.github/workflows/main.yml文件，这里我参考的Travis CI的配置，因为网上还没有Github Actions安装gulp相关的内容。 新增gulp安装命令 123npm install hexo-cli -gnpm install gulp -gnpm install 新增gulp压缩命令 1234hexo cleanhexo ggulphexo d 自动触发接着使用git push即可自动触发gulp压缩静态文件并部署到Github Pages 压缩效果html压缩前24KB，压缩后17KB，减少29%的体积 css和js也有接近30%的压缩，图片则没有效果，因为除了logo和ico全是用的CDN","link":"/28061956/"},{"title":"通过Github Actions实现Hexo博客自动部署","text":"一开始打算通过Travis CI来实现此功能，后来发现Github正式开放了Actions功能，本着一站体验的原则，选择了后者。 自动部署很早以前就听说了Travis CI自动部署的方案，但是我一直没觉得有什么优点，不过省了hexo d的命令而已。 在实际体验过后，依然没有感觉到… 但是我们折腾博客，从来就不是为了提高生产力，而是装逼罢了。 ActionsGithub Actions和Travis CI的原理是一样的。 生成SSH私钥 1ssh-keygen -f github-deploy-key 连续三次回车，会生成”github-deploy-key“和”github-deploy-key.pub“两个文件。 Setting 打开博客源码分支”blog/settings/secrets“点击”Add new secrets“ name栏输入 HEXO_DEPLOY_PRI value栏输入之前生成的 github-deploy-key文件里面的内容 接着打开pages分支”master/settings/keys“点击”Add deploy key“ title栏输入HEXO_DEPLOY_PUB key栏输入之前生成的github-deploy-key.pub文件里面的内容 yml文件 打开博客源码分支”blog/.github/workflows“新建一个”main.yml“文件 12345678910111213141516171819202122232425262728293031323334name: CIon: push: branches: - blogjobs: build: runs-on: ubuntu-latest steps: - name: Checkout source uses: actions/checkout@v1 with: ref: blog - name: Use Node.js ${{ matrix.node_version }} uses: actions/setup-node@v1 with: version: ${{ matrix.node_version }} - name: Setup hexo env: ACTION_DEPLOY_KEY: ${{ secrets.ACTION_DEPLOY_KEY }} run: | mkdir -p ~/.ssh/ echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts git config --global user.email &quot;输入邮箱&quot; git config --global user.name &quot;输入用户名&quot; npm install hexo-cli -g npm install - name: Hexo deploy run: | hexo clean hexo d 自动部署接着git push推送一个commit到博客源码分支，点击Actions即可看见部署过程。 每次部署的时间大概在45s左右，实际上比hexo d还要慢些。","link":"/37e5a6a1/"},{"title":"降低评论门槛：使用Valine评论系统","text":"这次从Gitalk更换至Valine评论，主要出于两方面的因素考虑： 降低评论门槛，后者甚至不需要填写任何信息即可评论； 文章链接重新生成，导致之前的Gitalk评论数据丢失。 从昨晚开始折腾到现在，总算把基本功能设置好啦~ Valine评论启用实际上本款主题是适配了Valine评论系统的，但是由于版本错乱，加上我自己修改过主题文件，所以还是花了些时间。 另外还有一些配置项没弄好，例如默认头像和评论者信息，后面再慢慢研究。 搭配Valine-Admin系统如果不搭配Valine-Admin系统使用，Valine在很多地方体验都不好，例如邮件通知和管理评论。 整个过程基本都是教程，其中在某些地方我也栽了跟头。 SMTP邮箱设置 这里需要注意的是，如果用QQ邮箱，必须开启独立密码并用授权码登录，配置好后再重启一下。 应用日志提示成功就行了。 管理评论 管理评论的后台需要手动添加管理员账号，即存储-_User，依次在email、username、password三个单元格编辑，设置好邮箱、用户名和密码。 接着访问管理后台，输入邮箱和密码登录，不需要使用用户名。 在这里就可以进行评论管理啦，还支持手动发送邮件通知。 另外，每次有新评论产生时，应用日志中都会有提示： 收到的提醒邮件 另外还有点击链接自动跳转到评论处，我还没弄好... 总之，现在评论是可以正常使用啦，后面的细节我再慢慢调整吧，勤快！","link":"/b23226a5/"}],"tags":[],"categories":[],"pages":[{"title":"404 Not Found：网页已被删除","text":"setTimeout(function () { window.location.href = '//' + document.domain; }, 5000);","link":"/404.html"},{"title":"留言","text":"让我们以热烈的掌声感谢以下赞助商： Github ，部署静态网站 Hexo ，提供博客程序源码 Icarus ，添加主题美化 CODING，提供Cloud Studio云端开发空间 Json-content，生成本地搜索数据 Valine，增加评论功能 Valine-Admin，提供评论管理和邮件通知功能 Aplayer，负责音乐播放功能 MetingJS，提供BGM API接口 Jsdelivr，提供git仓库文件CDN加速服务 Loli，提供公共库加速服务 Abbrlink，专注于生产链接 Baidu-url-submit，百度主动推送插件 Outlook，负责评论提醒邮件发送 今日诗词，提供一言API Github Actions &amp; Coding持续集成，负责24小时持续集成并自动部署 Gulp，压缩静态文件 QQ相册，提供高速图床 konachan，提供文章封面图 腾讯公益，提供公益404页面 以及那些上文未提及的、在本站运营过程中对我提供帮助的人们，谢谢！ 免责申明本人在此发布文章（包括但不限于汉字、拼音、阿拉伯字母 、图片、影像，以及前述之各种任意组合等等）均为随意敲击键盘所出，用于检验本人电脑键盘录入、屏幕显示的机械、光电性能，并不代表本人观点。","link":"/about/index.html"}]}